<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[iOS系统数据库的调用]]></title>
      <url>http://59.110.60.152/2016/12/05/iOS%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="SQLite简介"><a href="#SQLite简介" class="headerlink" title="SQLite简介"></a>SQLite简介</h1><p>SQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite 是在世界上最广泛部署的 SQL 数据库引擎。SQLite 源代码不受版权限制。 基础数据库语句：<a href="http://%3Chttp://www.runoob.com/sqlite/sqlite-tutorial.html%3E" target="_blank" rel="external">《SQLite菜鸟教程》</a></p>
<p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>Xcode中引入SQLite 首先创建一个项目。<br>接下来引入SQLite，如图:<br><img src="http://59.110.60.152/wp-content/uploads/2016/11/A6CCBEFD-E0C6-4677-A3BA-F45E13561DC2-1.png" alt="a6ccbefd-e0c6-4677-a3ba-f45e13561dc2" width="1146" height="457" class="alignnone size-full wp-image-33"></p>
<p>点开加号<br><img class="alignnone size-full wp-image-34" src="http://59.110.60.152/wp-content/uploads/2016/11/1750016A-4C04-4413-95BF-272C2A82CB6C.png" alt="1750016a-4c04-4413-95bf-272c2a82cb6c" width="441" height="525"></p>
<p>选择一个库点击Add之后，完成后<br><img class="alignnone size-full wp-image-59" src="http://59.110.60.152/wp-content/uploads/2016/11/81BF5CD9-5DAD-40E7-9DF1-9175F7BFD94F.png" alt="81bf5cd9-5dad-40e7-9df1-9175f7bfd94f" width="704" height="166"><br>至此，SQLite库已经添加完成。</p>
<h1 id="创建打开数据库"><a href="#创建打开数据库" class="headerlink" title="创建打开数据库"></a>创建打开数据库</h1><p>使用 <code>sqlite3_open</code> 方法可以打开数据库，如果没有该文件，则系统会自动创建一个文件，并且打开。</p>
<p>首先引入数据库头文件</p>
<pre lang="objc" escaped="true">
#import "<sqlite.h>"
</sqlite.h></pre>

<h2 id="创建数据库路径"><a href="#创建数据库路径" class="headerlink" title="创建数据库路径"></a>创建数据库路径</h2><pre lang="objc" escaped="true">//数据库路径
NSString *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject; 
NSString *sqlitePath = [path stringByAppendingPathComponent:@"database.sqlite"];
</pre>

<h2 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h2><p>先创建一个全局变量，这个变量是数据库打开后返回的一个操作指针，可以使用它来对数据库进行操作</p>
<pre lang="objc" escaped="true">
sqlite3 *contactDatabase
</pre>

<p>打开数据库</p>
<pre lang="objc" escaped="true">
int result = sqlite3_open(sqlitePath.UTF8String, &contactDatabase);
if (result == SQLITE_OK) {
    //打开数据库成功
}
else {
    //打开数据库失败
}
</pre>

<h1 id="创建-amp-删除"><a href="#创建-amp-删除" class="headerlink" title="创建&amp;删除"></a>创建&amp;删除</h1><p><code>sqlite3_exce()</code> 执行一条非查询的语句</p>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre lang="objc" escaped="true">
NSString *sqlString = @"CREATE TABLE IF NOT EXISTS student (ID INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, age INTEGER, address TEXT)";
int result = sqlite3_exec(contactDatabase, sqlString.UTF8String, nil, nil, nil);
if (result == SQLITE_OK) {
    //创建数据库成功
}
else {
    //创建数据库失败
}
</pre>

<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><pre lang="objc" escaped="true">
NSString *sqlString = @"drop table studets";
int result = sqlite3_exec(contactDatabase, sqlString.UTF8String, nil, nil, nil);
if (result == SQLITE_OK) {
    //删除数据库成功
}
else {
    //删除数据库失败
}
</pre>

<h1 id="插入-amp-更新-amp-删除"><a href="#插入-amp-更新-amp-删除" class="headerlink" title="插入&amp;更新&amp;删除"></a>插入&amp;更新&amp;删除</h1><p>SQLite可以使用占位符来插入数据</p>
<h2 id="插入数据库-不使用占位符"><a href="#插入数据库-不使用占位符" class="headerlink" title="插入数据库 不使用占位符"></a>插入数据库 不使用占位符</h2><pre lang="objc" escaped="true">
NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO student (NAME, AGE, ADDRESS) VALUES ('%@', %@, '%@')", @"张三丰", @"127", @"北京市"];
int result = sqlite3_exec(contactDatabase, sqlString.UTF8String, nil, nil, nil);
if (result == SQLITE_OK) {
    //插入数据库成功
}
else {
    //插入数据库失败
}
</pre>

<p>使用占位符，需要用到 <code>sqlite3_prepare_v2</code> 和 <code>sqlite3_bind_text</code> 方法</p>
<pre lang="objc" escaped="true">
NSString *sqlString = @"INSERT INTO student (NAME, AGE, ADDRESS) VALUES (?, ?, ?)";
sqlite3_stmt *statement;
int result = sqlite3_prepare_v2(contactDatabase, sqlString.UTF8String, -1, &statement, NULL);
if (result == SQLITE_OK) {
    sqlite3_bind_text(statement, 1, "张三丰", -1, nil)
    sqlite3_bind_int(statement, 2, 127);
    sqlite3_bind_text(statement, 3, "北京市", -1, nil)

    if (sqlite3_step(statement) == SQLITE_DONE) {
        //插入数据库成功
    }
    sqlite3_finalize(statement);
}
else {
    //插入数据库失败
}
</pre>

<h2 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h2><p>和插入数据库类似，用SQLite的update语句即可</p>
<pre lang="objc" escaped="true">
NSString *sqlString = @"UPDATE student SET AGE = 129 WHERE NAME = '张三丰'";
int result = sqlite3_exec(contactDatabase, sqlString.UTF8String, nil, nil, nil);
if (result == SQLITE_OK) {
    //更新数据库成功
}
else {
    //更新数据库失败
}
</pre>

<p>也可使用占位符</p>
<pre lang="objc" escaped="true">NSString *sqlString = @"UPDATE student SET AGE = ? WHERE NAME = ?";
sqlite3_stmt *statement;
int result = sqlite3_prepare_v2(contactDatabase, sqlString.UTF8String, -1, &statement, NULL);
if (result == SQLITE_OK) {
    sqlite3_bind_int(statement, 1, 129);
    sqlite3_bind_text(statement, 2, "张三丰", -1, nil)

    if (sqlite3_step(statement) == SQLITE_DONE) {
        //插入数据库成功
    }
    sqlite3_finalize(statement);
}
else {
    //插入数据库失败
}
</pre>

<p>3.删除数据库</p>
<p>和插入数据库类似，用SQLite的update语句即可</p>
<pre lang="objc" escaped="true">NSString *sqlString = @"DELETE FROM student WHERE NAME = '张三丰'";
int result = sqlite3_exec(contactDatabase, sqlString.UTF8String, nil, nil, nil);
if (result == SQLITE_OK) {
    //删除成功
}
else {
    //删除失败
}
</pre>

<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><pre lang="objc" escaped="true">
NSString *sqlString = @"SELECT * FROM student";
sqlite3_stmt *statement;
int result = sqlite3_prepare_v2(contactDatabase, sqlString.UTF8String, -1, &statement, NULL);
if (result == SQLITE_OK) {
    while (sqlite3_step(statement) == SQLITE_ROW) {
        char *name = (char *)sqlite3_column_text(statement, 1);
        NSString *nameString = [NSString stringWithUTF8String:name];
        int age = sqlite3_column_int(statement, 2);
        char *address = (char *)sqlite3_column_text(statement, 3);
        NSString *addressString = [NSString stringWithUTF8String:address];
        NSLog(@"name:%@  age:%d  address:%@", nameString, age, addressString);
    }
}
else {
    //查询失败
}
</pre>

</the>]]></content>
    </entry>
    
  
  
</search>
